---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kometa
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
#    - name: plex
#      namespace: default
    - name: radarr
      namespace: default
    - name: sonarr
      namespace: default
    - name: external-secrets
      namespace: external-secrets
    - name: volsync
      namespace: volsync-system
  values:
    controllers:
      kometa:
        type: cronjob
        cronjob:
          schedule: "0 5 * * *"
          timeZone: "${TIMEZONE}"
          concurrencyPolicy: Forbid
          startingDeadlineSeconds: 300
          successfulJobsHistory: 1
          failedJobsHistory: 1
        initContainers:
          git-sync:
            env:
              GITSYNC_REPO: https://github.com/cbrherms/kometa-config/
              GITSYNC_REF: main
              GITSYNC_ROOT: /git
              GITSYNC_DEPTH: 1
              GITSYNC_ONE_TIME: "true"
            image:
              repository: registry.k8s.io/git-sync/git-sync
              tag: v4.4.2@sha256:3089d9787b89bdc5af01d9f6e8d515aefb9672e8aea3972d7ff67478112bacb3
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
          prepare-config:
            image:
              repository: busybox
              tag: latest
            command:
              - sh
              - -c
              - |
                echo "Copying config.yml from git repo..."
                if [ -f /git/kometa-config/config.yml ]; then
                  cp /git/kometa-config/config.yml /config/config.yml
                else
                  echo "ERROR: /git/kometa-config/config.yml not found!"
                  exit 1
                fi

                echo "Setting permissions for config.yml..."
                chmod 644 /config/config.yml

                if [ ! -d "/config/.config" ]; then
                  echo "Creating /config/.config directory..."
                  mkdir -p /config/.config
                fi

                echo "Setting ownership and permissions for 1Password config..."
                chown -R 1000:1000 /config/.config
                # Because fsgroup will overwrite op's config permissions, set them again
                find /config/.config -type d -exec chmod 700 {} \;
                find /config/.config -type f -exec chmod 600 {} \;
                chmod -R g-s /config/.config

                echo "Setting ownership for /tmp..."
                chown 1000:1000 /tmp

                echo "  - Configuration file copied and permissions set"
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
        containers:
          app:
            image:
              repository: ghcr.io/cbrherms/kometa
              tag: 2.2.0@sha256:5cafb6e3a15e5d09b6f52afdf0123d329c5d883c1d51247f94a7e25b335bf4fe
            command:
              - /bin/sh
              - -c
            args:
              - |
                # Run Kometa processes
                echo "Starting Kometa run for Movies library..."
                python3 kometa.py --run --run-libraries "Movies"
                echo "Completed Kometa run for Movies library."

                echo "Starting Kometa run for TV Shows library..."
                python3 kometa.py --run --run-libraries "TV Shows"
                echo "Completed Kometa run for TV Shows library."

                echo "Starting Kometa run for Anime library..."
                python3 kometa.py --run --run-libraries "Anime"
                echo "Completed Kometa run for Anime library."

                # Run Kometa for playlists only across all libraries
                echo "Starting Kometa run for Playlists..."
                python3 kometa.py --run --playlists-only
                echo "Completed Kometa run for Playlists."

                # Update tokens in 1Password
                echo "Updating authorization tokens in 1Password..."
                if [ -f /scripts/update-auth-tokens.py ]; then
                  python3 /scripts/update-auth-tokens.py
                  echo "Token update complete."
                else
                  echo "Token update script not found."
                fi
            env:
              TZ: "${TIMEZONE}"
            envFrom:
              - secretRef:
                  name: kometa-secret
            resources:
              requests:
                cpu: 100m
                memory: 4096M
              limits:
                memory: 8192M
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              capabilities:
                drop: ["ALL"]
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /config
      assets:
        type: persistentVolumeClaim
        existingClaim: kometa-assets
        globalMounts:
          - path: /config/assets
      token-updater-script:
        type: configMap
        name: kometa-token-updater
        globalMounts:
          - path: /scripts
      logs:
        type: nfs
        server: truenas.lan.${SECRET_DOMAIN}
        path: /mnt/BACKUPS/kubernetes/kometa
        globalMounts:
          - path: /config/logs
      git:
        type: emptyDir
        globalMounts:
          - path: /git
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp
